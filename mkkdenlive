#!/usr/bin/python3
#	mkkdenlive - kdenlive build script tooling
#	Copyright (C) 2018-2020 Johannes Bauer
#
#	This file is part of mkkdenlive.
#
#	mkkdenlive is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	mkkdenlive is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with mkkdenlive; if not, write to the Free Software
#	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#	Johannes Bauer <JohannesBauer@gmx.de>

import os
import sys
import json
import logging
import shutil
import subprocess
import datetime
import io
import hashlib
from FriendlyArgumentParser import FriendlyArgumentParser
from WorkDir import WorkDir

class KdenliveBuilder(object):
	def __init__(self, args):
		self._log = logging.getLogger("builder")
		self._args = args
		self._config = self._read_config()
		self._logdir = os.path.realpath(self._args.log_directory) + "/"
		self._seqno = 0
		try:
			os.makedirs(self._logdir)
		except FileExistsError:
			pass
		self._env = {
			"PKG_CONFIG_PATH":		self._getpath("bin/lib/pkgconfig"),
			"LD_LIBRARY_PATH":		self._getpath("bin/lib"),
			"PATH":					self._getpath("bin/bin") + ":" + os.environ["PATH"],
		}

	def _read_config(self):
		with open(self._args.config) as f:
			return json.loads(f.read())

	def _getpath(self, subdir_name, mkdir = False):
		dirname = os.path.expanduser(self._args.target) + "/" + subdir_name
		if mkdir:
			try:
				os.makedirs(dirname)
			except FileExistsError:
				pass
		return dirname

	def _eval_condition(self, cond):
		known_conditions = {
			"debug?":		self._args.debug_build,
			"!debug?":		not self._args.debug_build,
		}
		if cond not in known_conditions:
			raise Exception("\"%s\" is not a known condition." % (cond))
		return known_conditions[cond]

	def _subs(self, arg):
		if isinstance(arg, str):
			arg = arg.replace("{PREFIX}", self._getpath("bin"))
			arg = arg.replace("{JOBS}", str(self._args.parallel_build_jobs))
			return arg
		elif isinstance(arg, list):
			# Condition
			if len(arg) != 2:
				raise Exception("[ Condition, argument ] is required: %s" % (str(arg)))
			(condition, argument) = arg
			if self._eval_condition(condition):
				return self._subs(argument)
			else:
				return None

	def _subs_cmd(self, cmd):
		cmd = [ self._subs(arg) for arg in cmd ]
		cmd = [ arg for arg in cmd if arg is not None ]
		return cmd

	def _execute(self, pkg_config, cmd, env = None):
		self._seqno += 1
		now = datetime.datetime.now()
		cmd_name = os.path.basename(cmd[0])
		if (cmd_name in [ "git", "make" ]) and (len(cmd) >= 2) and (not cmd[1].startswith("-")):
			cmd_name += "_%s" % (cmd[1])
		log_filename = "%s%s_%03d_%s_%s.log" % (self._logdir, now.strftime("%Y_%m_%d_%H_%M_%S"), self._seqno, pkg_config["name"], cmd_name)
		cmd = self._subs_cmd(cmd)
		cmd_str = " ".join(cmd)

		custom_env = dict(self._env)
		if env is not None:
			custom_env.update({ key: self._subs(value) for (key, value) in env.items() })

		self._log.debug("Executing %s (%s)" % (cmd_str, os.path.basename(log_filename)))
		try:
			with open(log_filename, "wb") as f:
				log = io.TextIOWrapper(f)
				print("%s: %s" % (now.strftime("%Y-%m-%d %H:%M:%S"), cmd_str), file = log)
				print("Executing in %s" % (os.getcwd()), file = log)
				print("-" * 120, file = log)
				print("Environment:", file = log)
				for (key, value) in sorted(custom_env.items()):
					print("%s=\"%s\"" % (key, value), file = log)
				print("-" * 120, file = log)
				print("Full command:", file = log)
				envs = " ".join("%s=\"%s\"" % (key, value) for (key, value) in sorted(custom_env.items()))
				print("%s %s" % (envs, cmd_str), file = log)
				print("=" * 120, file = log)
				log.flush()
				f.flush()
				process_env = dict(os.environ)
				process_env.update(custom_env)
				subprocess.check_call(cmd, stdout = f, stderr = subprocess.STDOUT, env = process_env)
		except subprocess.CalledProcessError:
			self._log.error("Execution failed: %s" % (cmd_str))
			print("-" * 120)
			print("Environment was:")
			for (key, value) in sorted(custom_env.items()):
				print("%s=\"%s\"" % (key, value))
			print("=" * 120)
			subprocess.check_call([ "tail", "-n", "30", log_filename ])
			sys.exit(1)

	@staticmethod
	def _git_get_version():
		try:
			output = subprocess.check_output([ "git", "describe", "--tags", "--candidates=1000", "--abbrev=10", "--dirty" ], stderr = subprocess.DEVNULL).decode().rstrip("\r\n")
		except subprocess.CalledProcessError:
			# No names? Then revision
			output = subprocess.check_output([ "git", "rev-parse", "HEAD" ]).decode().rstrip("\r\n")
			output = output[ : 10]
		return output

	def _retrieve(self, pkg_config):
		self._log.debug("Fetching sources for %s using %s", pkg_config["name"], pkg_config["method"])
		src_dir = self._getpath("src/" + pkg_config["name"])
		if pkg_config["method"] == "git":
			if not os.path.isdir(src_dir):
				self._log.info("Cloning git repository %s", pkg_config["src"])
				with WorkDir(self._getpath("src")):
					self._execute(pkg_config, [ "git", "clone", pkg_config["src"], pkg_config["name"] ])
			else:
				with WorkDir(src_dir):
					self._execute(pkg_config, [ "git", "clean", "-dfx" ])
					self._execute(pkg_config, [ "git", "checkout", "master" ])
					self._execute(pkg_config, [ "git", "reset", "--hard" ])
					self._execute(pkg_config, [ "git", "pull" ])
			if "branch" in pkg_config:
				with WorkDir(src_dir):
					self._execute(pkg_config, [ "git", "checkout", pkg_config["branch"] ])
			with WorkDir(src_dir):
				build_version = "git " + self._git_get_version()
		elif pkg_config["method"] == "targz":
			archive_filename = self._getpath("src/" + pkg_config["name"] + ".tar.gz")
			if not os.path.isfile(archive_filename):
				self._log.info("Downloading %s", pkg_config["src"])
				self._execute(pkg_config, [ "wget", "-O", archive_filename, pkg_config["src"] ])
			try:
				shutil.rmtree(src_dir)
			except FileNotFoundError:
				pass
			src_dir = self._getpath("src/" + pkg_config["name"], mkdir = True)
			with WorkDir(src_dir):
				self._execute(pkg_config, [ "tar", "xfvz", archive_filename ])
			with open(archive_filename, "rb") as f:
				build_version = "%s (MD5 %s)" % (os.path.basename(pkg_config["src"]), hashlib.md5(f.read()).hexdigest()[ : 10])
		else:
			raise Exception("Unknown method: %s" % (pkg_config["method"]))

		version_path = self._getpath("src/versions", mkdir = True)
		with open(version_path + "/" + pkg_config["name"], "w") as f:
			print("%s: %s" % (pkg_config["name"], build_version), file = f)
		return build_version

	def _do_build(self, pkg_config):
		self._log.debug("Building %s", pkg_config["name"])
		with WorkDir(self._getpath("src/" + pkg_config["name"])):
			for build_cmd in pkg_config["build"]:
				if isinstance(build_cmd, list):
					self._execute(pkg_config, build_cmd)
				elif isinstance(build_cmd, dict):
					self._execute(pkg_config, build_cmd["cmd"], env = build_cmd.get("env", { }))
				else:
					raise Exception("Unknown build command: %s" % (build_cmd))

	def _write_buildfile(self, pkg_config):
		with open(self._args.buildstat_filename, "w") as f:
			print(json.dumps(pkg_config), file = f)

	def _erase_buildfile(self):
		try:
			os.unlink(self._args.buildstat_filename)
		except FileNotFoundError:
			pass

	def _patch(self, pkg_config):
		patch_dir = "patches/" + pkg_config["name"]
		if os.path.isdir(patch_dir):
			self._log.debug("Patching package %s", pkg_config["name"])
			cmd = [ "rsync", "-a", patch_dir + "/.", self._getpath("src/" + pkg_config["name"]) + "/" ]
			subprocess.check_call(cmd)

	def _build_pkg(self, pkg_config):
		self._log.debug("Building package %s", pkg_config["name"])
		self._write_buildfile(pkg_config)
		build_version = self._retrieve(pkg_config)
		self._log.info("Building package %s from %s", pkg_config["name"], build_version)
		self._patch(pkg_config)
		self._do_build(pkg_config)
		self._erase_buildfile()

	def _create_symlink(self, link_path, target_path, force = False):
		self._log.debug("Creating symbolic link %s -> %s", link_path, target_path)
		if os.path.lexists(link_path):
			if force:
				# Remove existing symlink
				self._log.debug("Forcefully removing old %s", link_path)
				try:
					os.unlink(link_path)
				except IsADirectoryError:
					self._log.error("Cannot unlink %s, is a directory. Not removing whole directory tree -- do this yourself if you really want it.", link_path)
					return
			else:
				# Verify
				if not os.path.islink(link_path):
					self._log.warning("Expected %s to be symbolic link, but was not.", link_path)
				else:
					# Read out link and check it points to the right target
					actual_target = os.readlink(link_path)
					if os.path.realpath(actual_target) != os.path.realpath(target_path):
						self._log.warning("Expected link %s to point to %s, but currently points to %s.", link_path, target_path, actual_target)
					else:
						self._log.debug("Symlink %s correctly set.", link_path)
				return
		try:
			os.makedirs(os.path.dirname(link_path))
		except FileExistsError:
			pass
		os.symlink(target_path, link_path)

	def _do_postinstall(self):
		self._create_symlink(os.path.expanduser("~/.local/share/kdenlive"), self._getpath("bin/share/kdenlive"), force = self._args.force_postinstall)
		self._create_symlink(os.path.expanduser("~/.local/share/kxmlgui5/kdenlive"), self._getpath("bin/share/kxmlgui5/kdenlive"), force = self._args.force_postinstall)

		with open(self._getpath("environment"), "w") as f:
			print("export PS1=\"(kdl) ${PS1}\"", file = f)
			print("export LD_LIBRARY_PATH=\"%s\"" % (self._getpath("bin/lib")), file = f)
			print("export PATH=\"%s:${PATH}\"" % (self._getpath("bin/bin")), file = f)

		with open(self._getpath("start_kdenlive"), "w") as f:
			print("#!/bin/bash", file = f)
			print(". \"%s\"" % (self._getpath("environment")), file = f)
			print("kdenlive", file = f)
		os.chmod(self._getpath("start_kdenlive"), 0o755)

	def _get_pkgs_after(self, name):
		pkgs = None
		for pkg in self._config["pkgs"]:
			if (pkgs is None) and (pkg["name"] == name):
				pkgs = [ ]
			if pkgs is not None:
				pkgs.append(pkg)
		return pkgs

	def run(self):
		if self._args.start_with is not None:
			build_pkgs = self._get_pkgs_after(self._args.start_with)
			if build_pkgs is None:
				raise Exception("No such package '%s'." % (self._args.start_with))
		elif self._args.resume:
			try:
				with open(self._args.buildstat_filename) as f:
					stats = json.loads(f.read())
					self._log.info("Resuming everything starting with %s", stats["name"])
					build_pkgs = self._get_pkgs_after(stats["name"])
			except FileNotFoundError:
				build_pkgs = self._config["pkgs"]
		elif self._args.build_only is not None:
			build_pkgs = [ pkg for pkg in self._config["pkgs"] if pkg["name"] == self._args.build_only ]
			if len(build_pkgs) == 0:
				raise Exception("No such package '%s'." % (self._args.build_only))
		else:
			# Build everything
			build_pkgs = self._config["pkgs"]

		self._getpath("src", mkdir = True)
		self._getpath("bin", mkdir = True)
		if not self._args.postinstall_only:
			for pkg in build_pkgs:
				self._build_pkg(pkg)
		self._do_postinstall()

parser = FriendlyArgumentParser()
parser.add_argument("-c", "--config", metavar = "filename", type = str, default = "configuration.json", help = "JSON build configuration to use. Defaults to %(default)s.")
parser.add_argument("-b", "--buildstat-filename", metavar = "filename", type = str, default = "buildstats.json", help = "Filename to write build status into in order to resume failed builds. Defaults to %(default)s.")
parser.add_argument("-l", "--log-directory", metavar = "path", type = str, default = "logs", help = "Log path. Defaults to %(default)s.")

group = parser.add_mutually_exclusive_group()
group.add_argument("-r", "--resume", action = "store_true", help = "Resume a previously failed build at the last package that failed.")
group.add_argument("-s", "--start-with", metavar = "pkgname", help = "Start with a particular package name in the build configuration and run all builds afterwards.")
group.add_argument("-o", "--build-only", metavar = "pkgname", help = "Only build a single package.")
group.add_argument("--postinstall-only", action = "store_true", help = "Do not build anything, just run the postinstallation.")

parser.add_argument("--force-postinstall", action = "store_true", help = "By default, the postinstallation process will create the appropriate symlinks for kdenlive only if they're not present already. When present, mkkdenlive will only check their correctness and warn if they're wrong. When specifying this option, data inside ~/.local/share may be overwritten because mkkdenlive will forcefully remove the previous contents before creating the symlinks. Use with caution.")
parser.add_argument("-j", "--parallel-build-jobs", metavar = "jobcnt", default = 12, help = "Build n jobs concurrently. Defaults to %(default)d.")
parser.add_argument("-t", "--target", metavar = "path", default = "~/kdenlive-build", help = "Base directory in which kdenlive and dependencies are downloaded and installed in. Defaults to %(default)s.")
parser.add_argument("--debug-build", action = "store_true", help = "Enable debugging mode (debug symbols, maybe less optimization) for built components.")
parser.add_argument("-v", "--verbose", action = "count", default = 0, help = "Increase debugging verbosity level.")
args = parser.parse_args(sys.argv[1:])

logging.root.setLevel(logging.DEBUG)
formatter = logging.Formatter("{asctime} [{levelname:.1s}]: {message}", style = "{")
handler = logging.StreamHandler()
handler.setLevel({
	0:	logging.INFO,
	1:	logging.DEBUG,
}.get(args.verbose, logging.INFO))
handler.setFormatter(formatter)
logging.root.addHandler(handler)

builder = KdenliveBuilder(args)
builder.run()
